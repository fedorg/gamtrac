schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint]
}

"""
expression to compare columns of type boolean. All fields are combined with logical 'AND'.
"""
input boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean]
}

"""conflict action"""
enum conflict_action {
  """ignore the insert on this row"""
  ignore

  """update the row with the given values"""
  update
}

"""
columns and relationships of "domain_users"
"""
type domain_users {
  groups(
    """JSON select path"""
    path: String
  ): jsonb!
  name: String!
  sid: String!
  username: String!
}

"""
aggregated selection of "domain_users"
"""
type domain_users_aggregate {
  aggregate: domain_users_aggregate_fields
  nodes: [domain_users!]!
}

"""
aggregate fields of "domain_users"
"""
type domain_users_aggregate_fields {
  count(columns: [domain_users_select_column!], distinct: Boolean): Int
  max: domain_users_max_fields
  min: domain_users_min_fields
}

"""
order by aggregate values of table "domain_users"
"""
input domain_users_aggregate_order_by {
  count: order_by
  max: domain_users_max_order_by
  min: domain_users_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input domain_users_append_input {
  groups: jsonb
}

"""
input type for inserting array relation for remote table "domain_users"
"""
input domain_users_arr_rel_insert_input {
  data: [domain_users_insert_input!]!
  on_conflict: domain_users_on_conflict
}

"""
Boolean expression to filter rows from the table "domain_users". All fields are combined with a logical 'AND'.
"""
input domain_users_bool_exp {
  _and: [domain_users_bool_exp]
  _not: domain_users_bool_exp
  _or: [domain_users_bool_exp]
  groups: jsonb_comparison_exp
  name: text_comparison_exp
  sid: text_comparison_exp
  username: text_comparison_exp
}

"""
unique or primary key constraints on table "domain_users"
"""
enum domain_users_constraint {
  """unique or primary key constraint"""
  domainUsers_pkey

  """unique or primary key constraint"""
  domainUsers_username_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input domain_users_delete_at_path_input {
  groups: [String]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input domain_users_delete_elem_input {
  groups: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input domain_users_delete_key_input {
  groups: String
}

"""
input type for inserting data into table "domain_users"
"""
input domain_users_insert_input {
  groups: jsonb
  name: String
  sid: String
  username: String
}

"""aggregate max on columns"""
type domain_users_max_fields {
  name: String
  sid: String
  username: String
}

"""
order by max() on columns of table "domain_users"
"""
input domain_users_max_order_by {
  name: order_by
  sid: order_by
  username: order_by
}

"""aggregate min on columns"""
type domain_users_min_fields {
  name: String
  sid: String
  username: String
}

"""
order by min() on columns of table "domain_users"
"""
input domain_users_min_order_by {
  name: order_by
  sid: order_by
  username: order_by
}

"""
response of any mutation on the table "domain_users"
"""
type domain_users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_users!]!
}

"""
input type for inserting object relation for remote table "domain_users"
"""
input domain_users_obj_rel_insert_input {
  data: domain_users_insert_input!
  on_conflict: domain_users_on_conflict
}

"""
on conflict condition type for table "domain_users"
"""
input domain_users_on_conflict {
  constraint: domain_users_constraint!
  update_columns: [domain_users_update_column!]!
}

"""
ordering options when selecting data from "domain_users"
"""
input domain_users_order_by {
  groups: order_by
  name: order_by
  sid: order_by
  username: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input domain_users_prepend_input {
  groups: jsonb
}

"""
select columns of table "domain_users"
"""
enum domain_users_select_column {
  """column name"""
  groups

  """column name"""
  name

  """column name"""
  sid

  """column name"""
  username
}

"""
input type for updating data in table "domain_users"
"""
input domain_users_set_input {
  groups: jsonb
  name: String
  sid: String
  username: String
}

"""
update columns of table "domain_users"
"""
enum domain_users_update_column {
  """column name"""
  groups

  """column name"""
  name

  """column name"""
  sid

  """column name"""
  username
}

"""
columns and relationships of "endpoints"
"""
type endpoints {
  endpoint_id: Int!
  ignore: Boolean!
  path: String!
  principal: Int
}

"""
aggregated selection of "endpoints"
"""
type endpoints_aggregate {
  aggregate: endpoints_aggregate_fields
  nodes: [endpoints!]!
}

"""
aggregate fields of "endpoints"
"""
type endpoints_aggregate_fields {
  avg: endpoints_avg_fields
  count(columns: [endpoints_select_column!], distinct: Boolean): Int
  max: endpoints_max_fields
  min: endpoints_min_fields
  stddev: endpoints_stddev_fields
  stddev_pop: endpoints_stddev_pop_fields
  stddev_samp: endpoints_stddev_samp_fields
  sum: endpoints_sum_fields
  var_pop: endpoints_var_pop_fields
  var_samp: endpoints_var_samp_fields
  variance: endpoints_variance_fields
}

"""
order by aggregate values of table "endpoints"
"""
input endpoints_aggregate_order_by {
  avg: endpoints_avg_order_by
  count: order_by
  max: endpoints_max_order_by
  min: endpoints_min_order_by
  stddev: endpoints_stddev_order_by
  stddev_pop: endpoints_stddev_pop_order_by
  stddev_samp: endpoints_stddev_samp_order_by
  sum: endpoints_sum_order_by
  var_pop: endpoints_var_pop_order_by
  var_samp: endpoints_var_samp_order_by
  variance: endpoints_variance_order_by
}

"""
input type for inserting array relation for remote table "endpoints"
"""
input endpoints_arr_rel_insert_input {
  data: [endpoints_insert_input!]!
  on_conflict: endpoints_on_conflict
}

"""aggregate avg on columns"""
type endpoints_avg_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by avg() on columns of table "endpoints"
"""
input endpoints_avg_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""
Boolean expression to filter rows from the table "endpoints". All fields are combined with a logical 'AND'.
"""
input endpoints_bool_exp {
  _and: [endpoints_bool_exp]
  _not: endpoints_bool_exp
  _or: [endpoints_bool_exp]
  endpoint_id: integer_comparison_exp
  ignore: boolean_comparison_exp
  path: text_comparison_exp
  principal: integer_comparison_exp
}

"""
unique or primary key constraints on table "endpoints"
"""
enum endpoints_constraint {
  """unique or primary key constraint"""
  endpoints_path_key

  """unique or primary key constraint"""
  endpoints_pkey
}

"""
input type for incrementing integer columne in table "endpoints"
"""
input endpoints_inc_input {
  endpoint_id: Int
  principal: Int
}

"""
input type for inserting data into table "endpoints"
"""
input endpoints_insert_input {
  endpoint_id: Int
  ignore: Boolean
  path: String
  principal: Int
}

"""aggregate max on columns"""
type endpoints_max_fields {
  endpoint_id: Int
  path: String
  principal: Int
}

"""
order by max() on columns of table "endpoints"
"""
input endpoints_max_order_by {
  endpoint_id: order_by
  path: order_by
  principal: order_by
}

"""aggregate min on columns"""
type endpoints_min_fields {
  endpoint_id: Int
  path: String
  principal: Int
}

"""
order by min() on columns of table "endpoints"
"""
input endpoints_min_order_by {
  endpoint_id: order_by
  path: order_by
  principal: order_by
}

"""
response of any mutation on the table "endpoints"
"""
type endpoints_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [endpoints!]!
}

"""
input type for inserting object relation for remote table "endpoints"
"""
input endpoints_obj_rel_insert_input {
  data: endpoints_insert_input!
  on_conflict: endpoints_on_conflict
}

"""
on conflict condition type for table "endpoints"
"""
input endpoints_on_conflict {
  constraint: endpoints_constraint!
  update_columns: [endpoints_update_column!]!
}

"""
ordering options when selecting data from "endpoints"
"""
input endpoints_order_by {
  endpoint_id: order_by
  ignore: order_by
  path: order_by
  principal: order_by
}

"""
select columns of table "endpoints"
"""
enum endpoints_select_column {
  """column name"""
  endpoint_id

  """column name"""
  ignore

  """column name"""
  path

  """column name"""
  principal
}

"""
input type for updating data in table "endpoints"
"""
input endpoints_set_input {
  endpoint_id: Int
  ignore: Boolean
  path: String
  principal: Int
}

"""aggregate stddev on columns"""
type endpoints_stddev_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by stddev() on columns of table "endpoints"
"""
input endpoints_stddev_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""aggregate stddev_pop on columns"""
type endpoints_stddev_pop_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by stddev_pop() on columns of table "endpoints"
"""
input endpoints_stddev_pop_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""aggregate stddev_samp on columns"""
type endpoints_stddev_samp_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by stddev_samp() on columns of table "endpoints"
"""
input endpoints_stddev_samp_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""aggregate sum on columns"""
type endpoints_sum_fields {
  endpoint_id: Int
  principal: Int
}

"""
order by sum() on columns of table "endpoints"
"""
input endpoints_sum_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""
update columns of table "endpoints"
"""
enum endpoints_update_column {
  """column name"""
  endpoint_id

  """column name"""
  ignore

  """column name"""
  path

  """column name"""
  principal
}

"""aggregate var_pop on columns"""
type endpoints_var_pop_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by var_pop() on columns of table "endpoints"
"""
input endpoints_var_pop_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""aggregate var_samp on columns"""
type endpoints_var_samp_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by var_samp() on columns of table "endpoints"
"""
input endpoints_var_samp_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""aggregate variance on columns"""
type endpoints_variance_fields {
  endpoint_id: Float
  principal: Float
}

"""
order by variance() on columns of table "endpoints"
"""
input endpoints_variance_order_by {
  endpoint_id: order_by
  principal: order_by
}

"""
columns and relationships of "file_history"
"""
type file_history {
  action: String!
  action_tstamp: timestamptz!
  file_history_id: bigint!
  filename: String!

  """An object relationship"""
  prev: file_history!
  prev_id: Int!

  """An array relationship"""
  rule_results(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): [rule_results!]!

  """An aggregated array relationship"""
  rule_results_aggregate(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): rule_results_aggregate!

  """An object relationship"""
  scan: scans!
  scan_id: Int!
}

"""
aggregated selection of "file_history"
"""
type file_history_aggregate {
  aggregate: file_history_aggregate_fields
  nodes: [file_history!]!
}

"""
aggregate fields of "file_history"
"""
type file_history_aggregate_fields {
  avg: file_history_avg_fields
  count(columns: [file_history_select_column!], distinct: Boolean): Int
  max: file_history_max_fields
  min: file_history_min_fields
  stddev: file_history_stddev_fields
  stddev_pop: file_history_stddev_pop_fields
  stddev_samp: file_history_stddev_samp_fields
  sum: file_history_sum_fields
  var_pop: file_history_var_pop_fields
  var_samp: file_history_var_samp_fields
  variance: file_history_variance_fields
}

"""
order by aggregate values of table "file_history"
"""
input file_history_aggregate_order_by {
  avg: file_history_avg_order_by
  count: order_by
  max: file_history_max_order_by
  min: file_history_min_order_by
  stddev: file_history_stddev_order_by
  stddev_pop: file_history_stddev_pop_order_by
  stddev_samp: file_history_stddev_samp_order_by
  sum: file_history_sum_order_by
  var_pop: file_history_var_pop_order_by
  var_samp: file_history_var_samp_order_by
  variance: file_history_variance_order_by
}

"""
input type for inserting array relation for remote table "file_history"
"""
input file_history_arr_rel_insert_input {
  data: [file_history_insert_input!]!
  on_conflict: file_history_on_conflict
}

"""aggregate avg on columns"""
type file_history_avg_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by avg() on columns of table "file_history"
"""
input file_history_avg_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""
Boolean expression to filter rows from the table "file_history". All fields are combined with a logical 'AND'.
"""
input file_history_bool_exp {
  _and: [file_history_bool_exp]
  _not: file_history_bool_exp
  _or: [file_history_bool_exp]
  action: text_comparison_exp
  action_tstamp: timestamptz_comparison_exp
  file_history_id: bigint_comparison_exp
  filename: text_comparison_exp
  prev: file_history_bool_exp
  prev_id: integer_comparison_exp
  rule_results: rule_results_bool_exp
  scan: scans_bool_exp
  scan_id: integer_comparison_exp
}

"""
unique or primary key constraints on table "file_history"
"""
enum file_history_constraint {
  """unique or primary key constraint"""
  file_history_pkey

  """unique or primary key constraint"""
  file_history_scan_id_filename_key

  """unique or primary key constraint"""
  file_history_scan_id_filename_prev_id_key
}

"""
input type for incrementing integer columne in table "file_history"
"""
input file_history_inc_input {
  file_history_id: bigint
  prev_id: Int
  scan_id: Int
}

"""
input type for inserting data into table "file_history"
"""
input file_history_insert_input {
  action: String
  action_tstamp: timestamptz
  file_history_id: bigint
  filename: String
  prev: file_history_obj_rel_insert_input
  prev_id: Int
  rule_results: rule_results_arr_rel_insert_input
  scan: scans_obj_rel_insert_input
  scan_id: Int
}

"""aggregate max on columns"""
type file_history_max_fields {
  action: String
  action_tstamp: timestamptz
  file_history_id: bigint
  filename: String
  prev_id: Int
  scan_id: Int
}

"""
order by max() on columns of table "file_history"
"""
input file_history_max_order_by {
  action: order_by
  action_tstamp: order_by
  file_history_id: order_by
  filename: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate min on columns"""
type file_history_min_fields {
  action: String
  action_tstamp: timestamptz
  file_history_id: bigint
  filename: String
  prev_id: Int
  scan_id: Int
}

"""
order by min() on columns of table "file_history"
"""
input file_history_min_order_by {
  action: order_by
  action_tstamp: order_by
  file_history_id: order_by
  filename: order_by
  prev_id: order_by
  scan_id: order_by
}

"""
response of any mutation on the table "file_history"
"""
type file_history_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [file_history!]!
}

"""
input type for inserting object relation for remote table "file_history"
"""
input file_history_obj_rel_insert_input {
  data: file_history_insert_input!
  on_conflict: file_history_on_conflict
}

"""
on conflict condition type for table "file_history"
"""
input file_history_on_conflict {
  constraint: file_history_constraint!
  update_columns: [file_history_update_column!]!
}

"""
ordering options when selecting data from "file_history"
"""
input file_history_order_by {
  action: order_by
  action_tstamp: order_by
  file_history_id: order_by
  filename: order_by
  prev: file_history_order_by
  prev_id: order_by
  rule_results_aggregate: rule_results_aggregate_order_by
  scan: scans_order_by
  scan_id: order_by
}

"""
select columns of table "file_history"
"""
enum file_history_select_column {
  """column name"""
  action

  """column name"""
  action_tstamp

  """column name"""
  file_history_id

  """column name"""
  filename

  """column name"""
  prev_id

  """column name"""
  scan_id
}

"""
input type for updating data in table "file_history"
"""
input file_history_set_input {
  action: String
  action_tstamp: timestamptz
  file_history_id: bigint
  filename: String
  prev_id: Int
  scan_id: Int
}

"""aggregate stddev on columns"""
type file_history_stddev_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by stddev() on columns of table "file_history"
"""
input file_history_stddev_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate stddev_pop on columns"""
type file_history_stddev_pop_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by stddev_pop() on columns of table "file_history"
"""
input file_history_stddev_pop_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate stddev_samp on columns"""
type file_history_stddev_samp_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by stddev_samp() on columns of table "file_history"
"""
input file_history_stddev_samp_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate sum on columns"""
type file_history_sum_fields {
  file_history_id: bigint
  prev_id: Int
  scan_id: Int
}

"""
order by sum() on columns of table "file_history"
"""
input file_history_sum_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""
update columns of table "file_history"
"""
enum file_history_update_column {
  """column name"""
  action

  """column name"""
  action_tstamp

  """column name"""
  file_history_id

  """column name"""
  filename

  """column name"""
  prev_id

  """column name"""
  scan_id
}

"""aggregate var_pop on columns"""
type file_history_var_pop_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by var_pop() on columns of table "file_history"
"""
input file_history_var_pop_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate var_samp on columns"""
type file_history_var_samp_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by var_samp() on columns of table "file_history"
"""
input file_history_var_samp_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""aggregate variance on columns"""
type file_history_variance_fields {
  file_history_id: Float
  prev_id: Float
  scan_id: Float
}

"""
order by variance() on columns of table "file_history"
"""
input file_history_variance_order_by {
  file_history_id: order_by
  prev_id: order_by
  scan_id: order_by
}

"""
columns and relationships of "files"
"""
type files {
  """An object relationship"""
  file_history: file_history
  file_history_id: bigint

  """An array relationship"""
  rule_results(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): [rule_results!]!

  """An aggregated array relationship"""
  rule_results_aggregate(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): rule_results_aggregate!
}

"""
aggregated selection of "files"
"""
type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

"""
aggregate fields of "files"
"""
type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

"""
order by aggregate values of table "files"
"""
input files_aggregate_order_by {
  avg: files_avg_order_by
  count: order_by
  max: files_max_order_by
  min: files_min_order_by
  stddev: files_stddev_order_by
  stddev_pop: files_stddev_pop_order_by
  stddev_samp: files_stddev_samp_order_by
  sum: files_sum_order_by
  var_pop: files_var_pop_order_by
  var_samp: files_var_samp_order_by
  variance: files_variance_order_by
}

"""aggregate avg on columns"""
type files_avg_fields {
  file_history_id: Float
}

"""
order by avg() on columns of table "files"
"""
input files_avg_order_by {
  file_history_id: order_by
}

"""
Boolean expression to filter rows from the table "files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp]
  _not: files_bool_exp
  _or: [files_bool_exp]
  file_history: file_history_bool_exp
  file_history_id: bigint_comparison_exp
  rule_results: rule_results_bool_exp
}

"""aggregate max on columns"""
type files_max_fields {
  file_history_id: bigint
}

"""
order by max() on columns of table "files"
"""
input files_max_order_by {
  file_history_id: order_by
}

"""aggregate min on columns"""
type files_min_fields {
  file_history_id: bigint
}

"""
order by min() on columns of table "files"
"""
input files_min_order_by {
  file_history_id: order_by
}

"""
ordering options when selecting data from "files"
"""
input files_order_by {
  file_history: file_history_order_by
  file_history_id: order_by
  rule_results_aggregate: rule_results_aggregate_order_by
}

"""
select columns of table "files"
"""
enum files_select_column {
  """column name"""
  file_history_id
}

"""aggregate stddev on columns"""
type files_stddev_fields {
  file_history_id: Float
}

"""
order by stddev() on columns of table "files"
"""
input files_stddev_order_by {
  file_history_id: order_by
}

"""aggregate stddev_pop on columns"""
type files_stddev_pop_fields {
  file_history_id: Float
}

"""
order by stddev_pop() on columns of table "files"
"""
input files_stddev_pop_order_by {
  file_history_id: order_by
}

"""aggregate stddev_samp on columns"""
type files_stddev_samp_fields {
  file_history_id: Float
}

"""
order by stddev_samp() on columns of table "files"
"""
input files_stddev_samp_order_by {
  file_history_id: order_by
}

"""aggregate sum on columns"""
type files_sum_fields {
  file_history_id: bigint
}

"""
order by sum() on columns of table "files"
"""
input files_sum_order_by {
  file_history_id: order_by
}

"""aggregate var_pop on columns"""
type files_var_pop_fields {
  file_history_id: Float
}

"""
order by var_pop() on columns of table "files"
"""
input files_var_pop_order_by {
  file_history_id: order_by
}

"""aggregate var_samp on columns"""
type files_var_samp_fields {
  file_history_id: Float
}

"""
order by var_samp() on columns of table "files"
"""
input files_var_samp_order_by {
  file_history_id: order_by
}

"""aggregate variance on columns"""
type files_variance_fields {
  file_history_id: Float
}

"""
order by variance() on columns of table "files"
"""
input files_variance_order_by {
  file_history_id: order_by
}

"""
expression to compare columns of type integer. All fields are combined with logical 'AND'.
"""
input integer_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

scalar jsonb

"""
expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "domain_users"
  """
  delete_domain_users(
    """filter the rows which have to be deleted"""
    where: domain_users_bool_exp!
  ): domain_users_mutation_response

  """
  delete data from the table: "endpoints"
  """
  delete_endpoints(
    """filter the rows which have to be deleted"""
    where: endpoints_bool_exp!
  ): endpoints_mutation_response

  """
  delete data from the table: "file_history"
  """
  delete_file_history(
    """filter the rows which have to be deleted"""
    where: file_history_bool_exp!
  ): file_history_mutation_response

  """
  delete data from the table: "rule_results"
  """
  delete_rule_results(
    """filter the rows which have to be deleted"""
    where: rule_results_bool_exp!
  ): rule_results_mutation_response

  """
  delete data from the table: "rules"
  """
  delete_rules(
    """filter the rows which have to be deleted"""
    where: rules_bool_exp!
  ): rules_mutation_response

  """
  delete data from the table: "scans"
  """
  delete_scans(
    """filter the rows which have to be deleted"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  insert data into the table: "domain_users"
  """
  insert_domain_users(
    """the rows to be inserted"""
    objects: [domain_users_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_users_on_conflict
  ): domain_users_mutation_response

  """
  insert data into the table: "endpoints"
  """
  insert_endpoints(
    """the rows to be inserted"""
    objects: [endpoints_insert_input!]!

    """on conflict condition"""
    on_conflict: endpoints_on_conflict
  ): endpoints_mutation_response

  """
  insert data into the table: "file_history"
  """
  insert_file_history(
    """the rows to be inserted"""
    objects: [file_history_insert_input!]!

    """on conflict condition"""
    on_conflict: file_history_on_conflict
  ): file_history_mutation_response

  """
  insert data into the table: "rule_results"
  """
  insert_rule_results(
    """the rows to be inserted"""
    objects: [rule_results_insert_input!]!

    """on conflict condition"""
    on_conflict: rule_results_on_conflict
  ): rule_results_mutation_response

  """
  insert data into the table: "rules"
  """
  insert_rules(
    """the rows to be inserted"""
    objects: [rules_insert_input!]!

    """on conflict condition"""
    on_conflict: rules_on_conflict
  ): rules_mutation_response

  """
  insert data into the table: "scans"
  """
  insert_scans(
    """the rows to be inserted"""
    objects: [scans_insert_input!]!

    """on conflict condition"""
    on_conflict: scans_on_conflict
  ): scans_mutation_response

  """
  update data of the table: "domain_users"
  """
  update_domain_users(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: domain_users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: domain_users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: domain_users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: domain_users_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: domain_users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_users_set_input

    """filter the rows which have to be updated"""
    where: domain_users_bool_exp!
  ): domain_users_mutation_response

  """
  update data of the table: "endpoints"
  """
  update_endpoints(
    """increments the integer columns with given value of the filtered values"""
    _inc: endpoints_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: endpoints_set_input

    """filter the rows which have to be updated"""
    where: endpoints_bool_exp!
  ): endpoints_mutation_response

  """
  update data of the table: "file_history"
  """
  update_file_history(
    """increments the integer columns with given value of the filtered values"""
    _inc: file_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: file_history_set_input

    """filter the rows which have to be updated"""
    where: file_history_bool_exp!
  ): file_history_mutation_response

  """
  update data of the table: "rule_results"
  """
  update_rule_results(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: rule_results_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: rule_results_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: rule_results_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: rule_results_delete_key_input

    """increments the integer columns with given value of the filtered values"""
    _inc: rule_results_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: rule_results_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: rule_results_set_input

    """filter the rows which have to be updated"""
    where: rule_results_bool_exp!
  ): rule_results_mutation_response

  """
  update data of the table: "rules"
  """
  update_rules(
    """increments the integer columns with given value of the filtered values"""
    _inc: rules_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rules_set_input

    """filter the rows which have to be updated"""
    where: rules_bool_exp!
  ): rules_mutation_response

  """
  update data of the table: "scans"
  """
  update_scans(
    """increments the integer columns with given value of the filtered values"""
    _inc: scans_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input

    """filter the rows which have to be updated"""
    where: scans_bool_exp!
  ): scans_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "domain_users"
  """
  domain_users(
    """distinct select on columns"""
    distinct_on: [domain_users_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_users_order_by!]

    """filter the rows returned"""
    where: domain_users_bool_exp
  ): [domain_users!]!

  """
  fetch aggregated fields from the table: "domain_users"
  """
  domain_users_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_users_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_users_order_by!]

    """filter the rows returned"""
    where: domain_users_bool_exp
  ): domain_users_aggregate!

  """fetch data from the table: "domain_users" using primary key columns"""
  domain_users_by_pk(sid: String!): domain_users

  """
  fetch data from the table: "endpoints"
  """
  endpoints(
    """distinct select on columns"""
    distinct_on: [endpoints_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endpoints_order_by!]

    """filter the rows returned"""
    where: endpoints_bool_exp
  ): [endpoints!]!

  """
  fetch aggregated fields from the table: "endpoints"
  """
  endpoints_aggregate(
    """distinct select on columns"""
    distinct_on: [endpoints_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endpoints_order_by!]

    """filter the rows returned"""
    where: endpoints_bool_exp
  ): endpoints_aggregate!

  """fetch data from the table: "endpoints" using primary key columns"""
  endpoints_by_pk(endpoint_id: Int!): endpoints

  """
  fetch data from the table: "file_history"
  """
  file_history(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): [file_history!]!

  """
  fetch aggregated fields from the table: "file_history"
  """
  file_history_aggregate(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): file_history_aggregate!

  """fetch data from the table: "file_history" using primary key columns"""
  file_history_by_pk(file_history_id: bigint!): file_history

  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """
  fetch data from the table: "rule_results"
  """
  rule_results(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): [rule_results!]!

  """
  fetch aggregated fields from the table: "rule_results"
  """
  rule_results_aggregate(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): rule_results_aggregate!

  """fetch data from the table: "rule_results" using primary key columns"""
  rule_results_by_pk(rule_result_id: Int!): rule_results

  """
  fetch data from the table: "rules"
  """
  rules(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): [rules!]!

  """
  fetch aggregated fields from the table: "rules"
  """
  rules_aggregate(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): rules_aggregate!

  """fetch data from the table: "rules" using primary key columns"""
  rules_by_pk(rule_id: Int!): rules

  """
  fetch data from the table: "scans"
  """
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """
  fetch aggregated fields from the table: "scans"
  """
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(scan_id: Int!): scans
}

"""
columns and relationships of "rule_results"
"""
type rule_results {
  created_at: timestamptz!
  data(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  file_history: file_history!
  file_history_id: Int!

  """An object relationship"""
  rule: rules!
  rule_id: Int!
  rule_result_id: Int!
}

"""
aggregated selection of "rule_results"
"""
type rule_results_aggregate {
  aggregate: rule_results_aggregate_fields
  nodes: [rule_results!]!
}

"""
aggregate fields of "rule_results"
"""
type rule_results_aggregate_fields {
  avg: rule_results_avg_fields
  count(columns: [rule_results_select_column!], distinct: Boolean): Int
  max: rule_results_max_fields
  min: rule_results_min_fields
  stddev: rule_results_stddev_fields
  stddev_pop: rule_results_stddev_pop_fields
  stddev_samp: rule_results_stddev_samp_fields
  sum: rule_results_sum_fields
  var_pop: rule_results_var_pop_fields
  var_samp: rule_results_var_samp_fields
  variance: rule_results_variance_fields
}

"""
order by aggregate values of table "rule_results"
"""
input rule_results_aggregate_order_by {
  avg: rule_results_avg_order_by
  count: order_by
  max: rule_results_max_order_by
  min: rule_results_min_order_by
  stddev: rule_results_stddev_order_by
  stddev_pop: rule_results_stddev_pop_order_by
  stddev_samp: rule_results_stddev_samp_order_by
  sum: rule_results_sum_order_by
  var_pop: rule_results_var_pop_order_by
  var_samp: rule_results_var_samp_order_by
  variance: rule_results_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input rule_results_append_input {
  data: jsonb
}

"""
input type for inserting array relation for remote table "rule_results"
"""
input rule_results_arr_rel_insert_input {
  data: [rule_results_insert_input!]!
  on_conflict: rule_results_on_conflict
}

"""aggregate avg on columns"""
type rule_results_avg_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by avg() on columns of table "rule_results"
"""
input rule_results_avg_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""
Boolean expression to filter rows from the table "rule_results". All fields are combined with a logical 'AND'.
"""
input rule_results_bool_exp {
  _and: [rule_results_bool_exp]
  _not: rule_results_bool_exp
  _or: [rule_results_bool_exp]
  created_at: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  file_history: file_history_bool_exp
  file_history_id: integer_comparison_exp
  rule: rules_bool_exp
  rule_id: integer_comparison_exp
  rule_result_id: integer_comparison_exp
}

"""
unique or primary key constraints on table "rule_results"
"""
enum rule_results_constraint {
  """unique or primary key constraint"""
  rule_results_file_history_id_rule_id_key

  """unique or primary key constraint"""
  rule_results_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input rule_results_delete_at_path_input {
  data: [String]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input rule_results_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input rule_results_delete_key_input {
  data: String
}

"""
input type for incrementing integer columne in table "rule_results"
"""
input rule_results_inc_input {
  file_history_id: Int
  rule_id: Int
  rule_result_id: Int
}

"""
input type for inserting data into table "rule_results"
"""
input rule_results_insert_input {
  created_at: timestamptz
  data: jsonb
  file_history: file_history_obj_rel_insert_input
  file_history_id: Int
  rule: rules_obj_rel_insert_input
  rule_id: Int
  rule_result_id: Int
}

"""aggregate max on columns"""
type rule_results_max_fields {
  created_at: timestamptz
  file_history_id: Int
  rule_id: Int
  rule_result_id: Int
}

"""
order by max() on columns of table "rule_results"
"""
input rule_results_max_order_by {
  created_at: order_by
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate min on columns"""
type rule_results_min_fields {
  created_at: timestamptz
  file_history_id: Int
  rule_id: Int
  rule_result_id: Int
}

"""
order by min() on columns of table "rule_results"
"""
input rule_results_min_order_by {
  created_at: order_by
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""
response of any mutation on the table "rule_results"
"""
type rule_results_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [rule_results!]!
}

"""
input type for inserting object relation for remote table "rule_results"
"""
input rule_results_obj_rel_insert_input {
  data: rule_results_insert_input!
  on_conflict: rule_results_on_conflict
}

"""
on conflict condition type for table "rule_results"
"""
input rule_results_on_conflict {
  constraint: rule_results_constraint!
  update_columns: [rule_results_update_column!]!
}

"""
ordering options when selecting data from "rule_results"
"""
input rule_results_order_by {
  created_at: order_by
  data: order_by
  file_history: file_history_order_by
  file_history_id: order_by
  rule: rules_order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input rule_results_prepend_input {
  data: jsonb
}

"""
select columns of table "rule_results"
"""
enum rule_results_select_column {
  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  file_history_id

  """column name"""
  rule_id

  """column name"""
  rule_result_id
}

"""
input type for updating data in table "rule_results"
"""
input rule_results_set_input {
  created_at: timestamptz
  data: jsonb
  file_history_id: Int
  rule_id: Int
  rule_result_id: Int
}

"""aggregate stddev on columns"""
type rule_results_stddev_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by stddev() on columns of table "rule_results"
"""
input rule_results_stddev_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate stddev_pop on columns"""
type rule_results_stddev_pop_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by stddev_pop() on columns of table "rule_results"
"""
input rule_results_stddev_pop_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate stddev_samp on columns"""
type rule_results_stddev_samp_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by stddev_samp() on columns of table "rule_results"
"""
input rule_results_stddev_samp_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate sum on columns"""
type rule_results_sum_fields {
  file_history_id: Int
  rule_id: Int
  rule_result_id: Int
}

"""
order by sum() on columns of table "rule_results"
"""
input rule_results_sum_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""
update columns of table "rule_results"
"""
enum rule_results_update_column {
  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  file_history_id

  """column name"""
  rule_id

  """column name"""
  rule_result_id
}

"""aggregate var_pop on columns"""
type rule_results_var_pop_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by var_pop() on columns of table "rule_results"
"""
input rule_results_var_pop_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate var_samp on columns"""
type rule_results_var_samp_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by var_samp() on columns of table "rule_results"
"""
input rule_results_var_samp_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""aggregate variance on columns"""
type rule_results_variance_fields {
  file_history_id: Float
  rule_id: Float
  rule_result_id: Float
}

"""
order by variance() on columns of table "rule_results"
"""
input rule_results_variance_order_by {
  file_history_id: order_by
  rule_id: order_by
  rule_result_id: order_by
}

"""
columns and relationships of "rules"
"""
type rules {
  ignore: Boolean!
  principal: Int
  priority: Int!
  rule: String!
  rule_id: Int!

  """An array relationship"""
  rule_results(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): [rule_results!]!

  """An aggregated array relationship"""
  rule_results_aggregate(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): rule_results_aggregate!
}

"""
aggregated selection of "rules"
"""
type rules_aggregate {
  aggregate: rules_aggregate_fields
  nodes: [rules!]!
}

"""
aggregate fields of "rules"
"""
type rules_aggregate_fields {
  avg: rules_avg_fields
  count(columns: [rules_select_column!], distinct: Boolean): Int
  max: rules_max_fields
  min: rules_min_fields
  stddev: rules_stddev_fields
  stddev_pop: rules_stddev_pop_fields
  stddev_samp: rules_stddev_samp_fields
  sum: rules_sum_fields
  var_pop: rules_var_pop_fields
  var_samp: rules_var_samp_fields
  variance: rules_variance_fields
}

"""
order by aggregate values of table "rules"
"""
input rules_aggregate_order_by {
  avg: rules_avg_order_by
  count: order_by
  max: rules_max_order_by
  min: rules_min_order_by
  stddev: rules_stddev_order_by
  stddev_pop: rules_stddev_pop_order_by
  stddev_samp: rules_stddev_samp_order_by
  sum: rules_sum_order_by
  var_pop: rules_var_pop_order_by
  var_samp: rules_var_samp_order_by
  variance: rules_variance_order_by
}

"""
input type for inserting array relation for remote table "rules"
"""
input rules_arr_rel_insert_input {
  data: [rules_insert_input!]!
  on_conflict: rules_on_conflict
}

"""aggregate avg on columns"""
type rules_avg_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by avg() on columns of table "rules"
"""
input rules_avg_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""
Boolean expression to filter rows from the table "rules". All fields are combined with a logical 'AND'.
"""
input rules_bool_exp {
  _and: [rules_bool_exp]
  _not: rules_bool_exp
  _or: [rules_bool_exp]
  ignore: boolean_comparison_exp
  principal: integer_comparison_exp
  priority: integer_comparison_exp
  rule: text_comparison_exp
  rule_id: integer_comparison_exp
  rule_results: rule_results_bool_exp
}

"""
unique or primary key constraints on table "rules"
"""
enum rules_constraint {
  """unique or primary key constraint"""
  rules_pkey

  """unique or primary key constraint"""
  rules_principal_priority_ignore_key

  """unique or primary key constraint"""
  rules_principal_rule_ignore_key
}

"""
input type for incrementing integer columne in table "rules"
"""
input rules_inc_input {
  principal: Int
  priority: Int
  rule_id: Int
}

"""
input type for inserting data into table "rules"
"""
input rules_insert_input {
  ignore: Boolean
  principal: Int
  priority: Int
  rule: String
  rule_id: Int
  rule_results: rule_results_arr_rel_insert_input
}

"""aggregate max on columns"""
type rules_max_fields {
  principal: Int
  priority: Int
  rule: String
  rule_id: Int
}

"""
order by max() on columns of table "rules"
"""
input rules_max_order_by {
  principal: order_by
  priority: order_by
  rule: order_by
  rule_id: order_by
}

"""aggregate min on columns"""
type rules_min_fields {
  principal: Int
  priority: Int
  rule: String
  rule_id: Int
}

"""
order by min() on columns of table "rules"
"""
input rules_min_order_by {
  principal: order_by
  priority: order_by
  rule: order_by
  rule_id: order_by
}

"""
response of any mutation on the table "rules"
"""
type rules_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [rules!]!
}

"""
input type for inserting object relation for remote table "rules"
"""
input rules_obj_rel_insert_input {
  data: rules_insert_input!
  on_conflict: rules_on_conflict
}

"""
on conflict condition type for table "rules"
"""
input rules_on_conflict {
  constraint: rules_constraint!
  update_columns: [rules_update_column!]!
}

"""
ordering options when selecting data from "rules"
"""
input rules_order_by {
  ignore: order_by
  principal: order_by
  priority: order_by
  rule: order_by
  rule_id: order_by
  rule_results_aggregate: rule_results_aggregate_order_by
}

"""
select columns of table "rules"
"""
enum rules_select_column {
  """column name"""
  ignore

  """column name"""
  principal

  """column name"""
  priority

  """column name"""
  rule

  """column name"""
  rule_id
}

"""
input type for updating data in table "rules"
"""
input rules_set_input {
  ignore: Boolean
  principal: Int
  priority: Int
  rule: String
  rule_id: Int
}

"""aggregate stddev on columns"""
type rules_stddev_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by stddev() on columns of table "rules"
"""
input rules_stddev_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""aggregate stddev_pop on columns"""
type rules_stddev_pop_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by stddev_pop() on columns of table "rules"
"""
input rules_stddev_pop_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""aggregate stddev_samp on columns"""
type rules_stddev_samp_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by stddev_samp() on columns of table "rules"
"""
input rules_stddev_samp_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""aggregate sum on columns"""
type rules_sum_fields {
  principal: Int
  priority: Int
  rule_id: Int
}

"""
order by sum() on columns of table "rules"
"""
input rules_sum_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""
update columns of table "rules"
"""
enum rules_update_column {
  """column name"""
  ignore

  """column name"""
  principal

  """column name"""
  priority

  """column name"""
  rule

  """column name"""
  rule_id
}

"""aggregate var_pop on columns"""
type rules_var_pop_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by var_pop() on columns of table "rules"
"""
input rules_var_pop_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""aggregate var_samp on columns"""
type rules_var_samp_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by var_samp() on columns of table "rules"
"""
input rules_var_samp_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""aggregate variance on columns"""
type rules_variance_fields {
  principal: Float
  priority: Float
  rule_id: Float
}

"""
order by variance() on columns of table "rules"
"""
input rules_variance_order_by {
  principal: order_by
  priority: order_by
  rule_id: order_by
}

"""
columns and relationships of "scans"
"""
type scans {
  completed_at: timestamptz

  """An array relationship"""
  file_histories(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): [file_history!]!

  """An aggregated array relationship"""
  file_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): file_history_aggregate!
  scan_id: Int!
  started_at: timestamptz!
}

"""
aggregated selection of "scans"
"""
type scans_aggregate {
  aggregate: scans_aggregate_fields
  nodes: [scans!]!
}

"""
aggregate fields of "scans"
"""
type scans_aggregate_fields {
  avg: scans_avg_fields
  count(columns: [scans_select_column!], distinct: Boolean): Int
  max: scans_max_fields
  min: scans_min_fields
  stddev: scans_stddev_fields
  stddev_pop: scans_stddev_pop_fields
  stddev_samp: scans_stddev_samp_fields
  sum: scans_sum_fields
  var_pop: scans_var_pop_fields
  var_samp: scans_var_samp_fields
  variance: scans_variance_fields
}

"""
order by aggregate values of table "scans"
"""
input scans_aggregate_order_by {
  avg: scans_avg_order_by
  count: order_by
  max: scans_max_order_by
  min: scans_min_order_by
  stddev: scans_stddev_order_by
  stddev_pop: scans_stddev_pop_order_by
  stddev_samp: scans_stddev_samp_order_by
  sum: scans_sum_order_by
  var_pop: scans_var_pop_order_by
  var_samp: scans_var_samp_order_by
  variance: scans_variance_order_by
}

"""
input type for inserting array relation for remote table "scans"
"""
input scans_arr_rel_insert_input {
  data: [scans_insert_input!]!
  on_conflict: scans_on_conflict
}

"""aggregate avg on columns"""
type scans_avg_fields {
  scan_id: Float
}

"""
order by avg() on columns of table "scans"
"""
input scans_avg_order_by {
  scan_id: order_by
}

"""
Boolean expression to filter rows from the table "scans". All fields are combined with a logical 'AND'.
"""
input scans_bool_exp {
  _and: [scans_bool_exp]
  _not: scans_bool_exp
  _or: [scans_bool_exp]
  completed_at: timestamptz_comparison_exp
  file_histories: file_history_bool_exp
  scan_id: integer_comparison_exp
  started_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "scans"
"""
enum scans_constraint {
  """unique or primary key constraint"""
  scans_pkey
}

"""
input type for incrementing integer columne in table "scans"
"""
input scans_inc_input {
  scan_id: Int
}

"""
input type for inserting data into table "scans"
"""
input scans_insert_input {
  completed_at: timestamptz
  file_histories: file_history_arr_rel_insert_input
  scan_id: Int
  started_at: timestamptz
}

"""aggregate max on columns"""
type scans_max_fields {
  completed_at: timestamptz
  scan_id: Int
  started_at: timestamptz
}

"""
order by max() on columns of table "scans"
"""
input scans_max_order_by {
  completed_at: order_by
  scan_id: order_by
  started_at: order_by
}

"""aggregate min on columns"""
type scans_min_fields {
  completed_at: timestamptz
  scan_id: Int
  started_at: timestamptz
}

"""
order by min() on columns of table "scans"
"""
input scans_min_order_by {
  completed_at: order_by
  scan_id: order_by
  started_at: order_by
}

"""
response of any mutation on the table "scans"
"""
type scans_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [scans!]!
}

"""
input type for inserting object relation for remote table "scans"
"""
input scans_obj_rel_insert_input {
  data: scans_insert_input!
  on_conflict: scans_on_conflict
}

"""
on conflict condition type for table "scans"
"""
input scans_on_conflict {
  constraint: scans_constraint!
  update_columns: [scans_update_column!]!
}

"""
ordering options when selecting data from "scans"
"""
input scans_order_by {
  completed_at: order_by
  file_histories_aggregate: file_history_aggregate_order_by
  scan_id: order_by
  started_at: order_by
}

"""
select columns of table "scans"
"""
enum scans_select_column {
  """column name"""
  completed_at

  """column name"""
  scan_id

  """column name"""
  started_at
}

"""
input type for updating data in table "scans"
"""
input scans_set_input {
  completed_at: timestamptz
  scan_id: Int
  started_at: timestamptz
}

"""aggregate stddev on columns"""
type scans_stddev_fields {
  scan_id: Float
}

"""
order by stddev() on columns of table "scans"
"""
input scans_stddev_order_by {
  scan_id: order_by
}

"""aggregate stddev_pop on columns"""
type scans_stddev_pop_fields {
  scan_id: Float
}

"""
order by stddev_pop() on columns of table "scans"
"""
input scans_stddev_pop_order_by {
  scan_id: order_by
}

"""aggregate stddev_samp on columns"""
type scans_stddev_samp_fields {
  scan_id: Float
}

"""
order by stddev_samp() on columns of table "scans"
"""
input scans_stddev_samp_order_by {
  scan_id: order_by
}

"""aggregate sum on columns"""
type scans_sum_fields {
  scan_id: Int
}

"""
order by sum() on columns of table "scans"
"""
input scans_sum_order_by {
  scan_id: order_by
}

"""
update columns of table "scans"
"""
enum scans_update_column {
  """column name"""
  completed_at

  """column name"""
  scan_id

  """column name"""
  started_at
}

"""aggregate var_pop on columns"""
type scans_var_pop_fields {
  scan_id: Float
}

"""
order by var_pop() on columns of table "scans"
"""
input scans_var_pop_order_by {
  scan_id: order_by
}

"""aggregate var_samp on columns"""
type scans_var_samp_fields {
  scan_id: Float
}

"""
order by var_samp() on columns of table "scans"
"""
input scans_var_samp_order_by {
  scan_id: order_by
}

"""aggregate variance on columns"""
type scans_variance_fields {
  scan_id: Float
}

"""
order by variance() on columns of table "scans"
"""
input scans_variance_order_by {
  scan_id: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "domain_users"
  """
  domain_users(
    """distinct select on columns"""
    distinct_on: [domain_users_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_users_order_by!]

    """filter the rows returned"""
    where: domain_users_bool_exp
  ): [domain_users!]!

  """
  fetch aggregated fields from the table: "domain_users"
  """
  domain_users_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_users_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_users_order_by!]

    """filter the rows returned"""
    where: domain_users_bool_exp
  ): domain_users_aggregate!

  """fetch data from the table: "domain_users" using primary key columns"""
  domain_users_by_pk(sid: String!): domain_users

  """
  fetch data from the table: "endpoints"
  """
  endpoints(
    """distinct select on columns"""
    distinct_on: [endpoints_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endpoints_order_by!]

    """filter the rows returned"""
    where: endpoints_bool_exp
  ): [endpoints!]!

  """
  fetch aggregated fields from the table: "endpoints"
  """
  endpoints_aggregate(
    """distinct select on columns"""
    distinct_on: [endpoints_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endpoints_order_by!]

    """filter the rows returned"""
    where: endpoints_bool_exp
  ): endpoints_aggregate!

  """fetch data from the table: "endpoints" using primary key columns"""
  endpoints_by_pk(endpoint_id: Int!): endpoints

  """
  fetch data from the table: "file_history"
  """
  file_history(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): [file_history!]!

  """
  fetch aggregated fields from the table: "file_history"
  """
  file_history_aggregate(
    """distinct select on columns"""
    distinct_on: [file_history_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_history_order_by!]

    """filter the rows returned"""
    where: file_history_bool_exp
  ): file_history_aggregate!

  """fetch data from the table: "file_history" using primary key columns"""
  file_history_by_pk(file_history_id: bigint!): file_history

  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """
  fetch data from the table: "rule_results"
  """
  rule_results(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): [rule_results!]!

  """
  fetch aggregated fields from the table: "rule_results"
  """
  rule_results_aggregate(
    """distinct select on columns"""
    distinct_on: [rule_results_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rule_results_order_by!]

    """filter the rows returned"""
    where: rule_results_bool_exp
  ): rule_results_aggregate!

  """fetch data from the table: "rule_results" using primary key columns"""
  rule_results_by_pk(rule_result_id: Int!): rule_results

  """
  fetch data from the table: "rules"
  """
  rules(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): [rules!]!

  """
  fetch aggregated fields from the table: "rules"
  """
  rules_aggregate(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): rules_aggregate!

  """fetch data from the table: "rules" using primary key columns"""
  rules_by_pk(rule_id: Int!): rules

  """
  fetch data from the table: "scans"
  """
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """
  fetch aggregated fields from the table: "scans"
  """
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(scan_id: Int!): scans
}

"""
expression to compare columns of type text. All fields are combined with logical 'AND'.
"""
input text_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz]
}

