schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""conflict action"""
enum conflict_action {
  """ignore the insert on this row"""
  ignore

  """update the row with the given values"""
  update
}

"""
columns and relationships of "files"
"""
type files {
  data(
    """JSON select path"""
    path: String
  ): json!
  file_id: Int!
  filename: String!
  revision: Int!
}

"""
aggregated selection of "files"
"""
type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

"""
aggregate fields of "files"
"""
type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

"""
order by aggregate values of table "files"
"""
input files_aggregate_order_by {
  avg: files_avg_order_by
  count: order_by
  max: files_max_order_by
  min: files_min_order_by
  stddev: files_stddev_order_by
  stddev_pop: files_stddev_pop_order_by
  stddev_samp: files_stddev_samp_order_by
  sum: files_sum_order_by
  var_pop: files_var_pop_order_by
  var_samp: files_var_samp_order_by
  variance: files_variance_order_by
}

"""
input type for inserting array relation for remote table "files"
"""
input files_arr_rel_insert_input {
  data: [files_insert_input!]!
  on_conflict: files_on_conflict
}

"""aggregate avg on columns"""
type files_avg_fields {
  file_id: Float
  revision: Float
}

"""
order by avg() on columns of table "files"
"""
input files_avg_order_by {
  file_id: order_by
  revision: order_by
}

"""
Boolean expression to filter rows from the table "files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp]
  _not: files_bool_exp
  _or: [files_bool_exp]
  data: json_comparison_exp
  file_id: integer_comparison_exp
  filename: text_comparison_exp
  revision: integer_comparison_exp
}

"""
unique or primary key constraints on table "files"
"""
enum files_constraint {
  """unique or primary key constraint"""
  files_file_id_key

  """unique or primary key constraint"""
  files_pkey
}

"""
input type for incrementing integer columne in table "files"
"""
input files_inc_input {
  file_id: Int
  revision: Int
}

"""
input type for inserting data into table "files"
"""
input files_insert_input {
  data: json
  file_id: Int
  filename: String
  revision: Int
}

"""aggregate max on columns"""
type files_max_fields {
  file_id: Int
  filename: String
  revision: Int
}

"""
order by max() on columns of table "files"
"""
input files_max_order_by {
  file_id: order_by
  filename: order_by
  revision: order_by
}

"""aggregate min on columns"""
type files_min_fields {
  file_id: Int
  filename: String
  revision: Int
}

"""
order by min() on columns of table "files"
"""
input files_min_order_by {
  file_id: order_by
  filename: order_by
  revision: order_by
}

"""
response of any mutation on the table "files"
"""
type files_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [files!]!
}

"""
input type for inserting object relation for remote table "files"
"""
input files_obj_rel_insert_input {
  data: files_insert_input!
  on_conflict: files_on_conflict
}

"""
on conflict condition type for table "files"
"""
input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]!
}

"""
ordering options when selecting data from "files"
"""
input files_order_by {
  data: order_by
  file_id: order_by
  filename: order_by
  revision: order_by
}

"""
select columns of table "files"
"""
enum files_select_column {
  """column name"""
  data

  """column name"""
  file_id

  """column name"""
  filename

  """column name"""
  revision
}

"""
input type for updating data in table "files"
"""
input files_set_input {
  data: json
  file_id: Int
  filename: String
  revision: Int
}

"""aggregate stddev on columns"""
type files_stddev_fields {
  file_id: Float
  revision: Float
}

"""
order by stddev() on columns of table "files"
"""
input files_stddev_order_by {
  file_id: order_by
  revision: order_by
}

"""aggregate stddev_pop on columns"""
type files_stddev_pop_fields {
  file_id: Float
  revision: Float
}

"""
order by stddev_pop() on columns of table "files"
"""
input files_stddev_pop_order_by {
  file_id: order_by
  revision: order_by
}

"""aggregate stddev_samp on columns"""
type files_stddev_samp_fields {
  file_id: Float
  revision: Float
}

"""
order by stddev_samp() on columns of table "files"
"""
input files_stddev_samp_order_by {
  file_id: order_by
  revision: order_by
}

"""aggregate sum on columns"""
type files_sum_fields {
  file_id: Int
  revision: Int
}

"""
order by sum() on columns of table "files"
"""
input files_sum_order_by {
  file_id: order_by
  revision: order_by
}

"""
update columns of table "files"
"""
enum files_update_column {
  """column name"""
  data

  """column name"""
  file_id

  """column name"""
  filename

  """column name"""
  revision
}

"""aggregate var_pop on columns"""
type files_var_pop_fields {
  file_id: Float
  revision: Float
}

"""
order by var_pop() on columns of table "files"
"""
input files_var_pop_order_by {
  file_id: order_by
  revision: order_by
}

"""aggregate var_samp on columns"""
type files_var_samp_fields {
  file_id: Float
  revision: Float
}

"""
order by var_samp() on columns of table "files"
"""
input files_var_samp_order_by {
  file_id: order_by
  revision: order_by
}

"""aggregate variance on columns"""
type files_variance_fields {
  file_id: Float
  revision: Float
}

"""
order by variance() on columns of table "files"
"""
input files_variance_order_by {
  file_id: order_by
  revision: order_by
}

"""
expression to compare columns of type integer. All fields are combined with logical 'AND'.
"""
input integer_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

scalar json

"""
expression to compare columns of type json. All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "files"
  """
  delete_files(
    """filter the rows which have to be deleted"""
    where: files_bool_exp!
  ): files_mutation_response

  """
  insert data into the table: "files"
  """
  insert_files(
    """the rows to be inserted"""
    objects: [files_insert_input!]!

    """on conflict condition"""
    on_conflict: files_on_conflict
  ): files_mutation_response

  """
  update data of the table: "files"
  """
  update_files(
    """increments the integer columns with given value of the filtered values"""
    _inc: files_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input

    """filter the rows which have to be updated"""
    where: files_bool_exp!
  ): files_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """fetch data from the table: "files" using primary key columns"""
  files_by_pk(filename: String!, revision: Int!): files
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """fetch data from the table: "files" using primary key columns"""
  files_by_pk(filename: String!, revision: Int!): files
}

"""
expression to compare columns of type text. All fields are combined with logical 'AND'.
"""
input text_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

